# -*- coding: utf-8 -*-
"""Stock Price Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14b21mZDGD0YO-zx5ueJqQbGrNzst8Xxo
"""

import requests
import pandas as pd

def get_stock_data(symbol, api_key):
    url = f"https://www.alphavantage.co/query"
    params = {
        "function": "TIME_SERIES_DAILY",
        "symbol": symbol,
        "apikey": api_key,
        "outputsize": "compact"  # Use "full" for extended data
    }
    response = requests.get(url, params=params)
    data = response.json()

    # Extract the time series data
    time_series = data.get("Time Series (Daily)", {})

    # Convert the data to a DataFrame
    stock_data = pd.DataFrame.from_dict(time_series, orient='index', dtype='float')
    stock_data.index = pd.to_datetime(stock_data.index)

    return stock_data

# Replace with your own API key
api_key = 'AW2BK50M5PDPJEL6'
stock_symbol = 'IBM'
stock_data = get_stock_data(stock_symbol, api_key)
print(stock_data.head())  # Display the first few rows

import matplotlib.pyplot as plt

# Plotting the daily closing prices
closing_prices = stock_data['4. close'].sort_index()

plt.figure(figsize=(10,6))
plt.plot(closing_prices, label="Daily Closing Prices")
plt.title(f'{stock_symbol} Intraday Stock Prices (Daily)')
plt.xlabel('Time')
plt.ylabel('Price (USD)')
plt.xticks(rotation=45)
plt.legend()
plt.grid()
plt.show()

# Calculate a 5-period moving average
moving_average_5 = closing_prices.rolling(window=5).mean()

plt.figure(figsize=(10,6))
plt.plot(closing_prices, label="Daily Closing Prices")
plt.plot(moving_average_5, label="5-period Moving Average", color='orange')
plt.title(f'{stock_symbol} Intraday Stock Prices with Moving Average')
plt.xlabel('Time')
plt.ylabel('Price (USD)')
plt.xticks(rotation=45)
plt.legend()
plt.grid()
plt.show()

def get_rsi(symbol, api_key):
    url = f"https://www.alphavantage.co/query"
    params = {
        "function": "RSI",
        "symbol": symbol,
        "interval": "daily",
        "time_period": 14,
        "series_type": "close",
        "apikey": api_key
    }
    response = requests.get(url, params=params)
    data = response.json()

    # Extract the RSI data
    rsi_series = data.get("Technical Analysis: RSI", {})

    # Convert to DataFrame
    rsi_data = pd.DataFrame.from_dict(rsi_series, orient='index', dtype='float')
    rsi_data.index = pd.to_datetime(rsi_data.index)

    return rsi_data

rsi_data = get_rsi(stock_symbol, api_key)
print(rsi_data.head())

# Plotting the RSI values
plt.figure(figsize=(10,6))
plt.plot(rsi_data['RSI'], label="RSI (daily)")
plt.title(f'{stock_symbol} Relative Strength Index (RSI)')
plt.xlabel('Time')
plt.ylabel('RSI')
plt.xticks(rotation=45)
plt.legend()
plt.grid()
plt.show()

# Merge stock_data with rsi_data on the index (Date)
merged_data = pd.merge(stock_data, rsi_data, left_index=True, right_index=True, how='inner')

# Now you can access 'RSI' column in the merged_data DataFrame
print(merged_data.head())  # To verify the merge was successful

from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score

# Create target variable (1 if price goes up, 0 if down)
merged_data['Target'] = (merged_data['4. close'].shift(-1) > merged_data['4. close']).astype(int)

# Create additional features (e.g., RSI, Moving Averages)
merged_data['MA5'] = merged_data['4. close'].rolling(window=5).mean()
merged_data['MA10'] = merged_data['4. close'].rolling(window=10).mean()

# Drop NaN values (since moving averages introduce NaNs initially)
merged_data = merged_data.dropna()

# Define features (including the RSI and moving averages) and target variable
X = merged_data[['MA5', 'MA10', 'RSI']]  # Features: Moving averages and RSI
y = merged_data['Target']  # Target: Whether the price will go up or down

# Split data into train and test sets (80% train, 20% test)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train Random Forest Classifier
clf = RandomForestClassifier(n_estimators=100, random_state=42)
clf.fit(X_train, y_train)

# Make predictions on the test set
y_pred = clf.predict(X_test)

# Create a DataFrame to show y_test and y_pred side by side
results_df = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})

# Print the DataFrame to visualize the results
print(results_df)

# Evaluate the classifier
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy}")
